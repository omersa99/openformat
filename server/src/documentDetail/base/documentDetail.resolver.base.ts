/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDocumentDetailArgs } from "./CreateDocumentDetailArgs";
import { UpdateDocumentDetailArgs } from "./UpdateDocumentDetailArgs";
import { DeleteDocumentDetailArgs } from "./DeleteDocumentDetailArgs";
import { DocumentDetailCountArgs } from "./DocumentDetailCountArgs";
import { DocumentDetailFindManyArgs } from "./DocumentDetailFindManyArgs";
import { DocumentDetailFindUniqueArgs } from "./DocumentDetailFindUniqueArgs";
import { DocumentDetail } from "./DocumentDetail";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { Document } from "../../document/base/Document";
import { Item } from "../../item/base/Item";
import { DocumentDetailService } from "../documentDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DocumentDetail)
export class DocumentDetailResolverBase {
  constructor(
    protected readonly service: DocumentDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DocumentDetail",
    action: "read",
    possession: "any",
  })
  async _documentDetailsMeta(
    @graphql.Args() args: DocumentDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DocumentDetail])
  @nestAccessControl.UseRoles({
    resource: "DocumentDetail",
    action: "read",
    possession: "any",
  })
  async documentDetails(
    @graphql.Args() args: DocumentDetailFindManyArgs
  ): Promise<DocumentDetail[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DocumentDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DocumentDetail",
    action: "read",
    possession: "own",
  })
  async documentDetail(
    @graphql.Args() args: DocumentDetailFindUniqueArgs
  ): Promise<DocumentDetail | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DocumentDetail)
  @nestAccessControl.UseRoles({
    resource: "DocumentDetail",
    action: "create",
    possession: "any",
  })
  async createDocumentDetail(
    @graphql.Args() args: CreateDocumentDetailArgs
  ): Promise<DocumentDetail> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        document: args.data.document
          ? {
              connect: args.data.document,
            }
          : undefined,

        item: args.data.item
          ? {
              connect: args.data.item,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DocumentDetail)
  @nestAccessControl.UseRoles({
    resource: "DocumentDetail",
    action: "update",
    possession: "any",
  })
  async updateDocumentDetail(
    @graphql.Args() args: UpdateDocumentDetailArgs
  ): Promise<DocumentDetail | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          document: args.data.document
            ? {
                connect: args.data.document,
              }
            : undefined,

          item: args.data.item
            ? {
                connect: args.data.item,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DocumentDetail)
  @nestAccessControl.UseRoles({
    resource: "DocumentDetail",
    action: "delete",
    possession: "any",
  })
  async deleteDocumentDetail(
    @graphql.Args() args: DeleteDocumentDetailArgs
  ): Promise<DocumentDetail | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Transaction], { name: "transactions" })
  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "read",
    possession: "any",
  })
  async resolveFieldTransactions(
    @graphql.Parent() parent: DocumentDetail,
    @graphql.Args() args: TransactionFindManyArgs
  ): Promise<Transaction[]> {
    const results = await this.service.findTransactions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Document, {
    nullable: true,
    name: "document",
  })
  @nestAccessControl.UseRoles({
    resource: "Document",
    action: "read",
    possession: "any",
  })
  async resolveFieldDocument(
    @graphql.Parent() parent: DocumentDetail
  ): Promise<Document | null> {
    const result = await this.service.getDocument(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Item, {
    nullable: true,
    name: "item",
  })
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "read",
    possession: "any",
  })
  async resolveFieldItem(
    @graphql.Parent() parent: DocumentDetail
  ): Promise<Item | null> {
    const result = await this.service.getItem(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
