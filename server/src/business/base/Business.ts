/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Account } from "../../account/base/Account";
import {
  ValidateNested,
  IsOptional,
  IsInt,
  IsDate,
  IsString,
} from "class-validator";
import { Type } from "class-transformer";
import { ClientsAndSupplier } from "../../clientsAndSupplier/base/ClientsAndSupplier";
import { Document } from "../../document/base/Document";
import { Item } from "../../item/base/Item";
import { User } from "../../user/base/User";
import { Setting } from "../../setting/base/Setting";

@ObjectType()
class Business {
  @ApiProperty({
    required: false,
    type: () => [Account],
  })
  @ValidateNested()
  @Type(() => Account)
  @IsOptional()
  accounts?: Array<Account>;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  bn!: number;

  @ApiProperty({
    required: false,
    type: () => [ClientsAndSupplier],
  })
  @ValidateNested()
  @Type(() => ClientsAndSupplier)
  @IsOptional()
  clientsAndSuppliers?: Array<ClientsAndSupplier>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [Document],
  })
  @ValidateNested()
  @Type(() => Document)
  @IsOptional()
  documents?: Array<Document>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [Item],
  })
  @ValidateNested()
  @Type(() => Item)
  @IsOptional()
  items?: Array<Item>;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  owner?: User | null;

  @ApiProperty({
    required: false,
    type: () => Setting,
  })
  @ValidateNested()
  @Type(() => Setting)
  @IsOptional()
  settings?: Setting | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Business as Business };
