/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BusinessService } from "../business.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BusinessCreateInput } from "./BusinessCreateInput";
import { BusinessWhereInput } from "./BusinessWhereInput";
import { BusinessWhereUniqueInput } from "./BusinessWhereUniqueInput";
import { BusinessFindManyArgs } from "./BusinessFindManyArgs";
import { BusinessUpdateInput } from "./BusinessUpdateInput";
import { Business } from "./Business";
import { AccountFindManyArgs } from "../../account/base/AccountFindManyArgs";
import { Account } from "../../account/base/Account";
import { AccountWhereUniqueInput } from "../../account/base/AccountWhereUniqueInput";
import { ClientsAndSupplierFindManyArgs } from "../../clientsAndSupplier/base/ClientsAndSupplierFindManyArgs";
import { ClientsAndSupplier } from "../../clientsAndSupplier/base/ClientsAndSupplier";
import { ClientsAndSupplierWhereUniqueInput } from "../../clientsAndSupplier/base/ClientsAndSupplierWhereUniqueInput";
import { DocumentFindManyArgs } from "../../document/base/DocumentFindManyArgs";
import { Document } from "../../document/base/Document";
import { DocumentWhereUniqueInput } from "../../document/base/DocumentWhereUniqueInput";
import { ItemFindManyArgs } from "../../item/base/ItemFindManyArgs";
import { Item } from "../../item/base/Item";
import { ItemWhereUniqueInput } from "../../item/base/ItemWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BusinessControllerBase {
  constructor(protected readonly service: BusinessService, protected readonly rolesBuilder: nestAccessControl.RolesBuilder) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Business })
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(@common.Body() data: BusinessCreateInput): Promise<Business> {
    return await this.service.create({
      data: {
        ...data,

        owner: data.owner
          ? {
              connect: data.owner,
            }
          : undefined,

        settings: data.settings
          ? {
              connect: data.settings,
            }
          : undefined,
      },
      select: {
        bn: true,
        createdAt: true,
        id: true,

        owner: {
          select: {
            id: true,
          },
        },

        settings: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Business] })
  @ApiNestedQuery(BusinessFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<Business[]> {
    const args = plainToClass(BusinessFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        bn: true,
        createdAt: true,
        id: true,

        owner: {
          select: {
            id: true,
          },
        },

        settings: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Business })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(@common.Param() params: BusinessWhereUniqueInput): Promise<Business | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        bn: true,
        createdAt: true,
        id: true,

        owner: {
          select: {
            id: true,
          },
        },

        settings: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(`No resource was found for ${JSON.stringify(params)}`);
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Business })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(@common.Param() params: BusinessWhereUniqueInput, @common.Body() data: BusinessUpdateInput): Promise<Business | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          owner: data.owner
            ? {
                connect: data.owner,
              }
            : undefined,

          settings: data.settings
            ? {
                connect: data.settings,
              }
            : undefined,
        },
        select: {
          bn: true,
          createdAt: true,
          id: true,

          owner: {
            select: {
              id: true,
            },
          },

          settings: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(`No resource was found for ${JSON.stringify(params)}`);
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Business })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(@common.Param() params: BusinessWhereUniqueInput): Promise<Business | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          bn: true,
          createdAt: true,
          id: true,

          owner: {
            select: {
              id: true,
            },
          },

          settings: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(`No resource was found for ${JSON.stringify(params)}`);
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/accounts")
  @ApiNestedQuery(AccountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async findManyAccounts(@common.Req() request: Request, @common.Param() params: BusinessWhereUniqueInput): Promise<Account[]> {
    const query = plainToClass(AccountFindManyArgs, request.query);
    const results = await this.service.findAccounts(params.id, {
      ...query,
      select: {
        accountantClassificationCode: true,
        accountBalanceAtStartOfSegment: true,
        accountBalanceInForeignCurrency: true,
        accountKey: true,
        accountName: true,

        business: {
          select: {
            id: true,
          },
        },

        centerAccount: true,

        clientsAndSuppliers: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        currencyCodeForForeignCurrency: true,
        examinedBalanceCode: true,
        examinedBalanceCodeDescription: true,
        id: true,
        totalCredit: true,
        totalDebit: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(`No resource was found for ${JSON.stringify(params)}`);
    }
    return results;
  }

  @common.Post("/:id/accounts")
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  async connectAccounts(@common.Param() params: BusinessWhereUniqueInput, @common.Body() body: AccountWhereUniqueInput[]): Promise<void> {
    const data = {
      accounts: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/accounts")
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  async updateAccounts(@common.Param() params: BusinessWhereUniqueInput, @common.Body() body: AccountWhereUniqueInput[]): Promise<void> {
    const data = {
      accounts: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/accounts")
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  async disconnectAccounts(@common.Param() params: BusinessWhereUniqueInput, @common.Body() body: AccountWhereUniqueInput[]): Promise<void> {
    const data = {
      accounts: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/clientsAndSuppliers")
  @ApiNestedQuery(ClientsAndSupplierFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ClientsAndSupplier",
    action: "read",
    possession: "any",
  })
  async findManyClientsAndSuppliers(@common.Req() request: Request, @common.Param() params: BusinessWhereUniqueInput): Promise<ClientsAndSupplier[]> {
    const query = plainToClass(ClientsAndSupplierFindManyArgs, request.query);
    const results = await this.service.findClientsAndSuppliers(params.id, {
      ...query,
      select: {
        account: {
          select: {
            id: true,
          },
        },

        addressCity: true,
        addressCountry: true,
        addressHouseNumber: true,
        addressPostalCode: true,
        addressStreet: true,

        business: {
          select: {
            id: true,
          },
        },

        businessNumber: true,
        countryCode: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(`No resource was found for ${JSON.stringify(params)}`);
    }
    return results;
  }

  @common.Post("/:id/clientsAndSuppliers")
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  async connectClientsAndSuppliers(@common.Param() params: BusinessWhereUniqueInput, @common.Body() body: ClientsAndSupplierWhereUniqueInput[]): Promise<void> {
    const data = {
      clientsAndSuppliers: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/clientsAndSuppliers")
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  async updateClientsAndSuppliers(@common.Param() params: BusinessWhereUniqueInput, @common.Body() body: ClientsAndSupplierWhereUniqueInput[]): Promise<void> {
    const data = {
      clientsAndSuppliers: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/clientsAndSuppliers")
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  async disconnectClientsAndSuppliers(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: ClientsAndSupplierWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clientsAndSuppliers: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/documents")
  @ApiNestedQuery(DocumentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Document",
    action: "read",
    possession: "any",
  })
  async findManyDocuments(@common.Req() request: Request, @common.Param() params: BusinessWhereUniqueInput): Promise<Document[]> {
    const query = plainToClass(DocumentFindManyArgs, request.query);
    const results = await this.service.findDocuments(params.id, {
      ...query,
      select: {
        business: {
          select: {
            id: true,
          },
        },

        canceledDocument: true,

        clientSupplier: {
          select: {
            id: true,
            name: true,
          },
        },

        createdAt: true,
        deductionAmount: true,
        documentDate: true,
        documentNumber: true,
        documentType: true,
        id: true,
        linkedDocumentIds: true,
        modifiedDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(`No resource was found for ${JSON.stringify(params)}`);
    }
    return results;
  }

  @common.Post("/:id/documents")
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  async connectDocuments(@common.Param() params: BusinessWhereUniqueInput, @common.Body() body: DocumentWhereUniqueInput[]): Promise<void> {
    const data = {
      documents: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/documents")
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  async updateDocuments(@common.Param() params: BusinessWhereUniqueInput, @common.Body() body: DocumentWhereUniqueInput[]): Promise<void> {
    const data = {
      documents: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/documents")
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  async disconnectDocuments(@common.Param() params: BusinessWhereUniqueInput, @common.Body() body: DocumentWhereUniqueInput[]): Promise<void> {
    const data = {
      documents: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/items")
  @ApiNestedQuery(ItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "read",
    possession: "any",
  })
  async findManyItems(@common.Req() request: Request, @common.Param() params: BusinessWhereUniqueInput): Promise<Item[]> {
    const query = plainToClass(ItemFindManyArgs, request.query);
    const results = await this.service.findItems(params.id, {
      ...query,
      select: {
        business: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        data: true,
        id: true,
        internalItemCode: true,
        itemName: true,
        openingBalance: true,
        sortingCode: true,
        sortingCodeDescription: true,
        supplierManufacturerCodeInProcurement: true,
        unitOfMeasurementDescription: true,
        universalItemCode: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(`No resource was found for ${JSON.stringify(params)}`);
    }
    return results;
  }

  @common.Post("/:id/items")
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  async connectItems(@common.Param() params: BusinessWhereUniqueInput, @common.Body() body: ItemWhereUniqueInput[]): Promise<void> {
    const data = {
      items: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/items")
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  async updateItems(@common.Param() params: BusinessWhereUniqueInput, @common.Body() body: ItemWhereUniqueInput[]): Promise<void> {
    const data = {
      items: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/items")
  @nestAccessControl.UseRoles({
    resource: "Business",
    action: "update",
    possession: "any",
  })
  async disconnectItems(@common.Param() params: BusinessWhereUniqueInput, @common.Body() body: ItemWhereUniqueInput[]): Promise<void> {
    const data = {
      items: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
