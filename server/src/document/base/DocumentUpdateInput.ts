/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BusinessWhereUniqueInput } from "../../business/base/BusinessWhereUniqueInput";
import {
  ValidateNested,
  IsOptional,
  IsBoolean,
  IsNumber,
  IsDate,
  IsInt,
  IsString,
} from "class-validator";
import { Type } from "class-transformer";
import { ClientsAndSupplierWhereUniqueInput } from "../../clientsAndSupplier/base/ClientsAndSupplierWhereUniqueInput";
import { Decimal } from "decimal.js";
import { DocumentDetailUpdateManyWithoutDocumentsInput } from "./DocumentDetailUpdateManyWithoutDocumentsInput";
import { ReceiptDetailUpdateManyWithoutDocumentsInput } from "./ReceiptDetailUpdateManyWithoutDocumentsInput";

@InputType()
class DocumentUpdateInput {
  @ApiProperty({
    required: false,
    type: () => BusinessWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => BusinessWhereUniqueInput)
  @IsOptional()
  @Field(() => BusinessWhereUniqueInput, {
    nullable: true,
  })
  business?: BusinessWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  canceledDocument?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => ClientsAndSupplierWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ClientsAndSupplierWhereUniqueInput)
  @IsOptional()
  @Field(() => ClientsAndSupplierWhereUniqueInput, {
    nullable: true,
  })
  clientSupplier?: ClientsAndSupplierWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  deductionAmount?: Decimal | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  documentDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => DocumentDetailUpdateManyWithoutDocumentsInput,
  })
  @ValidateNested()
  @Type(() => DocumentDetailUpdateManyWithoutDocumentsInput)
  @IsOptional()
  @Field(() => DocumentDetailUpdateManyWithoutDocumentsInput, {
    nullable: true,
  })
  documentDetails?: DocumentDetailUpdateManyWithoutDocumentsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  documentNumber?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  documentType?: number;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  linkedDocumentIds?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  modifiedDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => ReceiptDetailUpdateManyWithoutDocumentsInput,
  })
  @ValidateNested()
  @Type(() => ReceiptDetailUpdateManyWithoutDocumentsInput)
  @IsOptional()
  @Field(() => ReceiptDetailUpdateManyWithoutDocumentsInput, {
    nullable: true,
  })
  receiptDetails?: ReceiptDetailUpdateManyWithoutDocumentsInput;
}

export { DocumentUpdateInput as DocumentUpdateInput };
