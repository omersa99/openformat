/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BusinessWhereUniqueInput } from "../../business/base/BusinessWhereUniqueInput";
import {
  ValidateNested,
  IsOptional,
  IsBoolean,
  IsInt,
  IsString,
} from "class-validator";
import { Type } from "class-transformer";
import { ClientsAndSupplierWhereUniqueInput } from "../../clientsAndSupplier/base/ClientsAndSupplierWhereUniqueInput";
import { DocumentDetailCreateNestedManyWithoutDocumentsInput } from "./DocumentDetailCreateNestedManyWithoutDocumentsInput";
import { ReceiptDetailCreateNestedManyWithoutDocumentsInput } from "./ReceiptDetailCreateNestedManyWithoutDocumentsInput";

@InputType()
class DocumentCreateInput {
  @ApiProperty({
    required: false,
    type: () => BusinessWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => BusinessWhereUniqueInput)
  @IsOptional()
  @Field(() => BusinessWhereUniqueInput, {
    nullable: true,
  })
  business?: BusinessWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  canceledDocument?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => ClientsAndSupplierWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ClientsAndSupplierWhereUniqueInput)
  @IsOptional()
  @Field(() => ClientsAndSupplierWhereUniqueInput, {
    nullable: true,
  })
  clientSupplier?: ClientsAndSupplierWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  documentDate?: number | null;

  @ApiProperty({
    required: false,
    type: () => DocumentDetailCreateNestedManyWithoutDocumentsInput,
  })
  @ValidateNested()
  @Type(() => DocumentDetailCreateNestedManyWithoutDocumentsInput)
  @IsOptional()
  @Field(() => DocumentDetailCreateNestedManyWithoutDocumentsInput, {
    nullable: true,
  })
  documentDetails?: DocumentDetailCreateNestedManyWithoutDocumentsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  documentNumber?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  documentProductionDate?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  documentType?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  linkedDocumentIds?: string | null;

  @ApiProperty({
    required: false,
    type: () => ReceiptDetailCreateNestedManyWithoutDocumentsInput,
  })
  @ValidateNested()
  @Type(() => ReceiptDetailCreateNestedManyWithoutDocumentsInput)
  @IsOptional()
  @Field(() => ReceiptDetailCreateNestedManyWithoutDocumentsInput, {
    nullable: true,
  })
  receiptDetails?: ReceiptDetailCreateNestedManyWithoutDocumentsInput;
}

export { DocumentCreateInput as DocumentCreateInput };
