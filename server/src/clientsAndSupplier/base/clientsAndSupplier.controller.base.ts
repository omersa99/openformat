/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ClientsAndSupplierService } from "../clientsAndSupplier.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ClientsAndSupplierCreateInput } from "./ClientsAndSupplierCreateInput";
import { ClientsAndSupplierWhereInput } from "./ClientsAndSupplierWhereInput";
import { ClientsAndSupplierWhereUniqueInput } from "./ClientsAndSupplierWhereUniqueInput";
import { ClientsAndSupplierFindManyArgs } from "./ClientsAndSupplierFindManyArgs";
import { ClientsAndSupplierUpdateInput } from "./ClientsAndSupplierUpdateInput";
import { ClientsAndSupplier } from "./ClientsAndSupplier";
import { DocumentFindManyArgs } from "../../document/base/DocumentFindManyArgs";
import { Document } from "../../document/base/Document";
import { DocumentWhereUniqueInput } from "../../document/base/DocumentWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ClientsAndSupplierControllerBase {
  constructor(
    protected readonly service: ClientsAndSupplierService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClientsAndSupplier })
  @nestAccessControl.UseRoles({
    resource: "ClientsAndSupplier",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(
    @common.Body() data: ClientsAndSupplierCreateInput
  ): Promise<ClientsAndSupplier> {
    return await this.service.create({
      data: data,
      select: {
        addressCity: true,
        addressCountry: true,
        addressHouseNumber: true,
        addressPostalCode: true,
        addressStreet: true,
        businessNumber: true,
        countryCode: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ClientsAndSupplier] })
  @ApiNestedQuery(ClientsAndSupplierFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ClientsAndSupplier",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(
    @common.Req() request: Request
  ): Promise<ClientsAndSupplier[]> {
    const args = plainToClass(ClientsAndSupplierFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        addressCity: true,
        addressCountry: true,
        addressHouseNumber: true,
        addressPostalCode: true,
        addressStreet: true,
        businessNumber: true,
        countryCode: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClientsAndSupplier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ClientsAndSupplier",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: ClientsAndSupplierWhereUniqueInput
  ): Promise<ClientsAndSupplier | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        addressCity: true,
        addressCountry: true,
        addressHouseNumber: true,
        addressPostalCode: true,
        addressStreet: true,
        businessNumber: true,
        countryCode: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClientsAndSupplier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ClientsAndSupplier",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: ClientsAndSupplierWhereUniqueInput,
    @common.Body() data: ClientsAndSupplierUpdateInput
  ): Promise<ClientsAndSupplier | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          addressCity: true,
          addressCountry: true,
          addressHouseNumber: true,
          addressPostalCode: true,
          addressStreet: true,
          businessNumber: true,
          countryCode: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClientsAndSupplier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ClientsAndSupplier",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: ClientsAndSupplierWhereUniqueInput
  ): Promise<ClientsAndSupplier | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          addressCity: true,
          addressCountry: true,
          addressHouseNumber: true,
          addressPostalCode: true,
          addressStreet: true,
          businessNumber: true,
          countryCode: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/documents")
  @ApiNestedQuery(DocumentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Document",
    action: "read",
    possession: "any",
  })
  async findManyDocuments(
    @common.Req() request: Request,
    @common.Param() params: ClientsAndSupplierWhereUniqueInput
  ): Promise<Document[]> {
    const query = plainToClass(DocumentFindManyArgs, request.query);
    const results = await this.service.findDocuments(params.id, {
      ...query,
      select: {
        business: {
          select: {
            id: true,
          },
        },

        clientSupplier: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/documents")
  @nestAccessControl.UseRoles({
    resource: "ClientsAndSupplier",
    action: "update",
    possession: "any",
  })
  async connectDocuments(
    @common.Param() params: ClientsAndSupplierWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/documents")
  @nestAccessControl.UseRoles({
    resource: "ClientsAndSupplier",
    action: "update",
    possession: "any",
  })
  async updateDocuments(
    @common.Param() params: ClientsAndSupplierWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/documents")
  @nestAccessControl.UseRoles({
    resource: "ClientsAndSupplier",
    action: "update",
    possession: "any",
  })
  async disconnectDocuments(
    @common.Param() params: ClientsAndSupplierWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
