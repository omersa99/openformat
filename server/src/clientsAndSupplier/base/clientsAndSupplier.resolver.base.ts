/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateClientsAndSupplierArgs } from "./CreateClientsAndSupplierArgs";
import { UpdateClientsAndSupplierArgs } from "./UpdateClientsAndSupplierArgs";
import { DeleteClientsAndSupplierArgs } from "./DeleteClientsAndSupplierArgs";
import { ClientsAndSupplierCountArgs } from "./ClientsAndSupplierCountArgs";
import { ClientsAndSupplierFindManyArgs } from "./ClientsAndSupplierFindManyArgs";
import { ClientsAndSupplierFindUniqueArgs } from "./ClientsAndSupplierFindUniqueArgs";
import { ClientsAndSupplier } from "./ClientsAndSupplier";
import { DocumentFindManyArgs } from "../../document/base/DocumentFindManyArgs";
import { Document } from "../../document/base/Document";
import { ClientsAndSupplierService } from "../clientsAndSupplier.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ClientsAndSupplier)
export class ClientsAndSupplierResolverBase {
  constructor(
    protected readonly service: ClientsAndSupplierService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ClientsAndSupplier",
    action: "read",
    possession: "any",
  })
  async _clientsAndSuppliersMeta(
    @graphql.Args() args: ClientsAndSupplierCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ClientsAndSupplier])
  @nestAccessControl.UseRoles({
    resource: "ClientsAndSupplier",
    action: "read",
    possession: "any",
  })
  async clientsAndSuppliers(
    @graphql.Args() args: ClientsAndSupplierFindManyArgs
  ): Promise<ClientsAndSupplier[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ClientsAndSupplier, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ClientsAndSupplier",
    action: "read",
    possession: "own",
  })
  async clientsAndSupplier(
    @graphql.Args() args: ClientsAndSupplierFindUniqueArgs
  ): Promise<ClientsAndSupplier | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ClientsAndSupplier)
  @nestAccessControl.UseRoles({
    resource: "ClientsAndSupplier",
    action: "create",
    possession: "any",
  })
  async createClientsAndSupplier(
    @graphql.Args() args: CreateClientsAndSupplierArgs
  ): Promise<ClientsAndSupplier> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ClientsAndSupplier)
  @nestAccessControl.UseRoles({
    resource: "ClientsAndSupplier",
    action: "update",
    possession: "any",
  })
  async updateClientsAndSupplier(
    @graphql.Args() args: UpdateClientsAndSupplierArgs
  ): Promise<ClientsAndSupplier | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClientsAndSupplier)
  @nestAccessControl.UseRoles({
    resource: "ClientsAndSupplier",
    action: "delete",
    possession: "any",
  })
  async deleteClientsAndSupplier(
    @graphql.Args() args: DeleteClientsAndSupplierArgs
  ): Promise<ClientsAndSupplier | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Document], { name: "documents" })
  @nestAccessControl.UseRoles({
    resource: "Document",
    action: "read",
    possession: "any",
  })
  async resolveFieldDocuments(
    @graphql.Parent() parent: ClientsAndSupplier,
    @graphql.Args() args: DocumentFindManyArgs
  ): Promise<Document[]> {
    const results = await this.service.findDocuments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
