/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ReceiptDetailService } from "../receiptDetail.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ReceiptDetailCreateInput } from "./ReceiptDetailCreateInput";
import { ReceiptDetailWhereInput } from "./ReceiptDetailWhereInput";
import { ReceiptDetailWhereUniqueInput } from "./ReceiptDetailWhereUniqueInput";
import { ReceiptDetailFindManyArgs } from "./ReceiptDetailFindManyArgs";
import { ReceiptDetailUpdateInput } from "./ReceiptDetailUpdateInput";
import { ReceiptDetail } from "./ReceiptDetail";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { TransactionWhereUniqueInput } from "../../transaction/base/TransactionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ReceiptDetailControllerBase {
  constructor(
    protected readonly service: ReceiptDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReceiptDetail })
  @nestAccessControl.UseRoles({
    resource: "ReceiptDetail",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(
    @common.Body() data: ReceiptDetailCreateInput
  ): Promise<ReceiptDetail> {
    return await this.service.create({
      data: {
        ...data,

        document: data.document
          ? {
              connect: data.document,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        document: {
          select: {
            id: true,
          },
        },

        id: true,
        paymentCheckClearanceDate: true,
        paymentData: true,
        paymentType: true,
        total: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ReceiptDetail] })
  @ApiNestedQuery(ReceiptDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ReceiptDetail",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<ReceiptDetail[]> {
    const args = plainToClass(ReceiptDetailFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,

        document: {
          select: {
            id: true,
          },
        },

        id: true,
        paymentCheckClearanceDate: true,
        paymentData: true,
        paymentType: true,
        total: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReceiptDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ReceiptDetail",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: ReceiptDetailWhereUniqueInput
  ): Promise<ReceiptDetail | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,

        document: {
          select: {
            id: true,
          },
        },

        id: true,
        paymentCheckClearanceDate: true,
        paymentData: true,
        paymentType: true,
        total: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReceiptDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ReceiptDetail",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: ReceiptDetailWhereUniqueInput,
    @common.Body() data: ReceiptDetailUpdateInput
  ): Promise<ReceiptDetail | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          document: data.document
            ? {
                connect: data.document,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          document: {
            select: {
              id: true,
            },
          },

          id: true,
          paymentCheckClearanceDate: true,
          paymentData: true,
          paymentType: true,
          total: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReceiptDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ReceiptDetail",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: ReceiptDetailWhereUniqueInput
  ): Promise<ReceiptDetail | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,

          document: {
            select: {
              id: true,
            },
          },

          id: true,
          paymentCheckClearanceDate: true,
          paymentData: true,
          paymentType: true,
          total: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/transactions")
  @ApiNestedQuery(TransactionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "read",
    possession: "any",
  })
  async findManyTransactions(
    @common.Req() request: Request,
    @common.Param() params: ReceiptDetailWhereUniqueInput
  ): Promise<Transaction[]> {
    const query = plainToClass(TransactionFindManyArgs, request.query);
    const results = await this.service.findTransactions(params.id, {
      ...query,
      select: {
        accountInTransaction: {
          select: {
            id: true,
          },
        },

        actionAmount: true,
        actionIndicator: true,
        actionOperation: true,
        counterAccount: true,
        createdAt: true,
        data: true,
        date: true,
        details: true,

        documentDetail: {
          select: {
            id: true,
          },
        },

        entryDate: true,
        foreignCurrencyAmount: true,
        foreignCurrencyCode: true,
        id: true,
        lineNumberInTransaction: true,
        modifiedDate: true,
        portion: true,

        receiptDetail: {
          select: {
            id: true,
          },
        },

        reference: true,
        reference_2: true,
        transactionNumber: true,
        transactionType: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/transactions")
  @nestAccessControl.UseRoles({
    resource: "ReceiptDetail",
    action: "update",
    possession: "any",
  })
  async connectTransactions(
    @common.Param() params: ReceiptDetailWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/transactions")
  @nestAccessControl.UseRoles({
    resource: "ReceiptDetail",
    action: "update",
    possession: "any",
  })
  async updateTransactions(
    @common.Param() params: ReceiptDetailWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/transactions")
  @nestAccessControl.UseRoles({
    resource: "ReceiptDetail",
    action: "update",
    possession: "any",
  })
  async disconnectTransactions(
    @common.Param() params: ReceiptDetailWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
