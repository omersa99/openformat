/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateItemTransactionArgs } from "./CreateItemTransactionArgs";
import { UpdateItemTransactionArgs } from "./UpdateItemTransactionArgs";
import { DeleteItemTransactionArgs } from "./DeleteItemTransactionArgs";
import { ItemTransactionCountArgs } from "./ItemTransactionCountArgs";
import { ItemTransactionFindManyArgs } from "./ItemTransactionFindManyArgs";
import { ItemTransactionFindUniqueArgs } from "./ItemTransactionFindUniqueArgs";
import { ItemTransaction } from "./ItemTransaction";
import { ItemTransactionService } from "../itemTransaction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ItemTransaction)
export class ItemTransactionResolverBase {
  constructor(
    protected readonly service: ItemTransactionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ItemTransaction",
    action: "read",
    possession: "any",
  })
  async _itemTransactionsMeta(
    @graphql.Args() args: ItemTransactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ItemTransaction])
  @nestAccessControl.UseRoles({
    resource: "ItemTransaction",
    action: "read",
    possession: "any",
  })
  async itemTransactions(
    @graphql.Args() args: ItemTransactionFindManyArgs
  ): Promise<ItemTransaction[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ItemTransaction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ItemTransaction",
    action: "read",
    possession: "own",
  })
  async itemTransaction(
    @graphql.Args() args: ItemTransactionFindUniqueArgs
  ): Promise<ItemTransaction | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ItemTransaction)
  @nestAccessControl.UseRoles({
    resource: "ItemTransaction",
    action: "create",
    possession: "any",
  })
  async createItemTransaction(
    @graphql.Args() args: CreateItemTransactionArgs
  ): Promise<ItemTransaction> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ItemTransaction)
  @nestAccessControl.UseRoles({
    resource: "ItemTransaction",
    action: "update",
    possession: "any",
  })
  async updateItemTransaction(
    @graphql.Args() args: UpdateItemTransactionArgs
  ): Promise<ItemTransaction | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ItemTransaction)
  @nestAccessControl.UseRoles({
    resource: "ItemTransaction",
    action: "delete",
    possession: "any",
  })
  async deleteItemTransaction(
    @graphql.Args() args: DeleteItemTransactionArgs
  ): Promise<ItemTransaction | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
